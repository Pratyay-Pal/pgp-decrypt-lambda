#Change values in Parameter section only. Leave the rest as it is.
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  ECRName:
    Type: String
    Default: decrypt-file
    Description: URI of the image in ECR.

  ECRArn:
    Type: String
    Default: arn:aws:ecr:us-east-1:171321171015:repository/decrypt-file
    Description: URI of the image in ECR.

  PGPDecryptFunctionName:
    Type: String
    Default: pgp-decrypt-container
    Description: Name of PGP Decrypt Lambda.

  ECRImageURI:
    Type: String
    Default: 171321171015.dkr.ecr.us-east-1.amazonaws.com/decrypt-file:latest
    Description: URI of the image in ECR.

Resources:
  #SQS
  DecryptedFilesSQS:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: DecryptedFiles

  #Bucket
  ArtifactS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: pgp-artifact-store-bucket
      VersioningConfiguration:
        Status: Enabled
    DeletionPolicy: Retain
   
  EncryptedFilesS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: pgp-encrypted-files-bucket
      VersioningConfiguration:
        Status: Enabled
    DeletionPolicy: Retain
  #End Bucket
  
  #Roles
  LambdaUpdateFunctionCodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-update-function-code-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: lambda-update-function-code
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  LambdaDecryptFileRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-pgp-decrypt-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: lambda-update-function-code
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - s3-object-lambda:*
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - ecr-public:*
                  - sts:GetServiceBearerToken
                Resource:
                  - !Ref ECRArn
              - Effect: Allow
                Action:
                  - ssm:*
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - sqs:*
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  CFNRole2CreateResources:
    Type: AWS::IAM::Role
    Properties:
      RoleName: cfn-role-2-create-resources
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: Admin
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "*"
                Resource:
                  - "*"
  #End Roles

  PGPDecryptFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      MemorySize: 3008
      Timeout: 60
      ImageUri: !Ref ECRImageURI
      FunctionName: pgp-decrypt-container
      Role: !GetAtt LambdaDecryptFileRole.Arn
      Events:
        FileUploaded:
          Type: S3
          Properties:
            Bucket: !Ref EncryptedFilesS3Bucket
            Events: s3:ObjectCreated:*

  LambdaUpdateFunctionCode:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: lambda-update-function-code
      Runtime: "python3.12"
      Timeout: 60
      Role: !GetAtt LambdaUpdateFunctionCodeRole.Arn
      Handler: "index.lambda_handler"
      Code: 
        ZipFile: |
          #!/usr/bin/env python
          import json
          import boto3
          import os

          lambdaC = boto3.client('lambda')
          codepipelineC = boto3.client('codepipeline')
          def lambda_handler(event, context):
            jobId = event['CodePipeline.job']['id']
            print("Event : "+str(event))
            try:
                lambdaC.update_function_code(
                  FunctionName=os.environ['PGPDecryptFunctionName'],
                  ImageUri=os.environ['ECRImageURI'],
                  Publish=True
                )
                print("Execution succesful!")
                codepipelineC.put_job_success_result(
                  jobId=jobId
                )
            except Exception as e:
                print("Execution failed...")
                print(str(e))
                codepipelineC.put_job_failure_result(
                  jobId=jobId,
                  failureDetails={
                    'type':'JobFailed',
                    'message': str(e)
                  }
                )
      Environment:
        Variables:
          PGPDecryptFunctionName: !Ref PGPDecryptFunctionName
          ECRImageURI: !Ref ECRImageURI
  #End Lambda

  InfrastructureDeployment:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref ArtifactS3Bucket
        Type: S3
      Name: pgp-decrypt-update-lambda-on-ecr-change-pipeline
      PipelineType: V2
      RoleArn: !GetAtt CFNRole2CreateResources.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: ECR-Change-Source
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: ECR
                Version: 1
              Configuration:
                RepositoryName: !Ref ECRName
                ImageTag: latest
              OutputArtifacts: 
                - Name: SourceArtifact
        - Name: Deploy
          Actions:
            - Name: Update-Lambda
              RunOrder: 2
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: 1
              Configuration:
                FunctionName: !Ref LambdaUpdateFunctionCode